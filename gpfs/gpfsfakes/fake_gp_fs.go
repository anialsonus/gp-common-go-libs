// Code generated by counterfeiter. DO NOT EDIT.
package gpfsfakes

import (
	"io/fs"
	"sync"

	"github.com/greenplum-db/gp-common-go-libs/gpfs"
)

type FakeGpFs struct {
	AppendStub        func(string, string, fs.FileMode) (int, error)
	appendMutex       sync.RWMutex
	appendArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}
	appendReturns struct {
		result1 int
		result2 error
	}
	appendReturnsOnCall map[int]struct {
		result1 int
		result2 error
	}
	CheckExistsStub        func(string, gpfs.FsObjectType) (bool, error)
	checkExistsMutex       sync.RWMutex
	checkExistsArgsForCall []struct {
		arg1 string
		arg2 gpfs.FsObjectType
	}
	checkExistsReturns struct {
		result1 bool
		result2 error
	}
	checkExistsReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	ChmodStub        func(string, fs.FileMode) error
	chmodMutex       sync.RWMutex
	chmodArgsForCall []struct {
		arg1 string
		arg2 fs.FileMode
	}
	chmodReturns struct {
		result1 error
	}
	chmodReturnsOnCall map[int]struct {
		result1 error
	}
	ChownStub        func(string, string, string) error
	chownMutex       sync.RWMutex
	chownArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	chownReturns struct {
		result1 error
	}
	chownReturnsOnCall map[int]struct {
		result1 error
	}
	CopyStub        func(string, string, fs.FileMode) error
	copyMutex       sync.RWMutex
	copyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}
	copyReturns struct {
		result1 error
	}
	copyReturnsOnCall map[int]struct {
		result1 error
	}
	CreateDirStub        func(string) error
	createDirMutex       sync.RWMutex
	createDirArgsForCall []struct {
		arg1 string
	}
	createDirReturns struct {
		result1 error
	}
	createDirReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteStub        func(string) error
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 string
	}
	deleteReturns struct {
		result1 error
	}
	deleteReturnsOnCall map[int]struct {
		result1 error
	}
	GetFileModeStub        func(string) (fs.FileMode, error)
	getFileModeMutex       sync.RWMutex
	getFileModeArgsForCall []struct {
		arg1 string
	}
	getFileModeReturns struct {
		result1 fs.FileMode
		result2 error
	}
	getFileModeReturnsOnCall map[int]struct {
		result1 fs.FileMode
		result2 error
	}
	GetUidAndGidForPathStub        func(string) (int, int, error)
	getUidAndGidForPathMutex       sync.RWMutex
	getUidAndGidForPathArgsForCall []struct {
		arg1 string
	}
	getUidAndGidForPathReturns struct {
		result1 int
		result2 int
		result3 error
	}
	getUidAndGidForPathReturnsOnCall map[int]struct {
		result1 int
		result2 int
		result3 error
	}
	GlobStub        func(string) ([]string, error)
	globMutex       sync.RWMutex
	globArgsForCall []struct {
		arg1 string
	}
	globReturns struct {
		result1 []string
		result2 error
	}
	globReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	MatchPatternStub        func(string, string) ([]string, error)
	matchPatternMutex       sync.RWMutex
	matchPatternArgsForCall []struct {
		arg1 string
		arg2 string
	}
	matchPatternReturns struct {
		result1 []string
		result2 error
	}
	matchPatternReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	MatchStringStub        func(string, string) ([]string, error)
	matchStringMutex       sync.RWMutex
	matchStringArgsForCall []struct {
		arg1 string
		arg2 string
	}
	matchStringReturns struct {
		result1 []string
		result2 error
	}
	matchStringReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	ReadStub        func(string) (string, error)
	readMutex       sync.RWMutex
	readArgsForCall []struct {
		arg1 string
	}
	readReturns struct {
		result1 string
		result2 error
	}
	readReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	RecursiveChownStub        func(string, string, string) error
	recursiveChownMutex       sync.RWMutex
	recursiveChownArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	recursiveChownReturns struct {
		result1 error
	}
	recursiveChownReturnsOnCall map[int]struct {
		result1 error
	}
	WriteStub        func(string, string, fs.FileMode) error
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}
	writeReturns struct {
		result1 error
	}
	writeReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGpFs) Append(arg1 string, arg2 string, arg3 fs.FileMode) (int, error) {
	fake.appendMutex.Lock()
	ret, specificReturn := fake.appendReturnsOnCall[len(fake.appendArgsForCall)]
	fake.appendArgsForCall = append(fake.appendArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}{arg1, arg2, arg3})
	stub := fake.AppendStub
	fakeReturns := fake.appendReturns
	fake.recordInvocation("Append", []interface{}{arg1, arg2, arg3})
	fake.appendMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) AppendCallCount() int {
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	return len(fake.appendArgsForCall)
}

func (fake *FakeGpFs) AppendCalls(stub func(string, string, fs.FileMode) (int, error)) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = stub
}

func (fake *FakeGpFs) AppendArgsForCall(i int) (string, string, fs.FileMode) {
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	argsForCall := fake.appendArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGpFs) AppendReturns(result1 int, result2 error) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = nil
	fake.appendReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) AppendReturnsOnCall(i int, result1 int, result2 error) {
	fake.appendMutex.Lock()
	defer fake.appendMutex.Unlock()
	fake.AppendStub = nil
	if fake.appendReturnsOnCall == nil {
		fake.appendReturnsOnCall = make(map[int]struct {
			result1 int
			result2 error
		})
	}
	fake.appendReturnsOnCall[i] = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) CheckExists(arg1 string, arg2 gpfs.FsObjectType) (bool, error) {
	fake.checkExistsMutex.Lock()
	ret, specificReturn := fake.checkExistsReturnsOnCall[len(fake.checkExistsArgsForCall)]
	fake.checkExistsArgsForCall = append(fake.checkExistsArgsForCall, struct {
		arg1 string
		arg2 gpfs.FsObjectType
	}{arg1, arg2})
	stub := fake.CheckExistsStub
	fakeReturns := fake.checkExistsReturns
	fake.recordInvocation("CheckExists", []interface{}{arg1, arg2})
	fake.checkExistsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) CheckExistsCallCount() int {
	fake.checkExistsMutex.RLock()
	defer fake.checkExistsMutex.RUnlock()
	return len(fake.checkExistsArgsForCall)
}

func (fake *FakeGpFs) CheckExistsCalls(stub func(string, gpfs.FsObjectType) (bool, error)) {
	fake.checkExistsMutex.Lock()
	defer fake.checkExistsMutex.Unlock()
	fake.CheckExistsStub = stub
}

func (fake *FakeGpFs) CheckExistsArgsForCall(i int) (string, gpfs.FsObjectType) {
	fake.checkExistsMutex.RLock()
	defer fake.checkExistsMutex.RUnlock()
	argsForCall := fake.checkExistsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGpFs) CheckExistsReturns(result1 bool, result2 error) {
	fake.checkExistsMutex.Lock()
	defer fake.checkExistsMutex.Unlock()
	fake.CheckExistsStub = nil
	fake.checkExistsReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) CheckExistsReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkExistsMutex.Lock()
	defer fake.checkExistsMutex.Unlock()
	fake.CheckExistsStub = nil
	if fake.checkExistsReturnsOnCall == nil {
		fake.checkExistsReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkExistsReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) Chmod(arg1 string, arg2 fs.FileMode) error {
	fake.chmodMutex.Lock()
	ret, specificReturn := fake.chmodReturnsOnCall[len(fake.chmodArgsForCall)]
	fake.chmodArgsForCall = append(fake.chmodArgsForCall, struct {
		arg1 string
		arg2 fs.FileMode
	}{arg1, arg2})
	stub := fake.ChmodStub
	fakeReturns := fake.chmodReturns
	fake.recordInvocation("Chmod", []interface{}{arg1, arg2})
	fake.chmodMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) ChmodCallCount() int {
	fake.chmodMutex.RLock()
	defer fake.chmodMutex.RUnlock()
	return len(fake.chmodArgsForCall)
}

func (fake *FakeGpFs) ChmodCalls(stub func(string, fs.FileMode) error) {
	fake.chmodMutex.Lock()
	defer fake.chmodMutex.Unlock()
	fake.ChmodStub = stub
}

func (fake *FakeGpFs) ChmodArgsForCall(i int) (string, fs.FileMode) {
	fake.chmodMutex.RLock()
	defer fake.chmodMutex.RUnlock()
	argsForCall := fake.chmodArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGpFs) ChmodReturns(result1 error) {
	fake.chmodMutex.Lock()
	defer fake.chmodMutex.Unlock()
	fake.ChmodStub = nil
	fake.chmodReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) ChmodReturnsOnCall(i int, result1 error) {
	fake.chmodMutex.Lock()
	defer fake.chmodMutex.Unlock()
	fake.ChmodStub = nil
	if fake.chmodReturnsOnCall == nil {
		fake.chmodReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.chmodReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) Chown(arg1 string, arg2 string, arg3 string) error {
	fake.chownMutex.Lock()
	ret, specificReturn := fake.chownReturnsOnCall[len(fake.chownArgsForCall)]
	fake.chownArgsForCall = append(fake.chownArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.ChownStub
	fakeReturns := fake.chownReturns
	fake.recordInvocation("Chown", []interface{}{arg1, arg2, arg3})
	fake.chownMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) ChownCallCount() int {
	fake.chownMutex.RLock()
	defer fake.chownMutex.RUnlock()
	return len(fake.chownArgsForCall)
}

func (fake *FakeGpFs) ChownCalls(stub func(string, string, string) error) {
	fake.chownMutex.Lock()
	defer fake.chownMutex.Unlock()
	fake.ChownStub = stub
}

func (fake *FakeGpFs) ChownArgsForCall(i int) (string, string, string) {
	fake.chownMutex.RLock()
	defer fake.chownMutex.RUnlock()
	argsForCall := fake.chownArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGpFs) ChownReturns(result1 error) {
	fake.chownMutex.Lock()
	defer fake.chownMutex.Unlock()
	fake.ChownStub = nil
	fake.chownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) ChownReturnsOnCall(i int, result1 error) {
	fake.chownMutex.Lock()
	defer fake.chownMutex.Unlock()
	fake.ChownStub = nil
	if fake.chownReturnsOnCall == nil {
		fake.chownReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.chownReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) Copy(arg1 string, arg2 string, arg3 fs.FileMode) error {
	fake.copyMutex.Lock()
	ret, specificReturn := fake.copyReturnsOnCall[len(fake.copyArgsForCall)]
	fake.copyArgsForCall = append(fake.copyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}{arg1, arg2, arg3})
	stub := fake.CopyStub
	fakeReturns := fake.copyReturns
	fake.recordInvocation("Copy", []interface{}{arg1, arg2, arg3})
	fake.copyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) CopyCallCount() int {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	return len(fake.copyArgsForCall)
}

func (fake *FakeGpFs) CopyCalls(stub func(string, string, fs.FileMode) error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = stub
}

func (fake *FakeGpFs) CopyArgsForCall(i int) (string, string, fs.FileMode) {
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	argsForCall := fake.copyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGpFs) CopyReturns(result1 error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	fake.copyReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) CopyReturnsOnCall(i int, result1 error) {
	fake.copyMutex.Lock()
	defer fake.copyMutex.Unlock()
	fake.CopyStub = nil
	if fake.copyReturnsOnCall == nil {
		fake.copyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.copyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) CreateDir(arg1 string) error {
	fake.createDirMutex.Lock()
	ret, specificReturn := fake.createDirReturnsOnCall[len(fake.createDirArgsForCall)]
	fake.createDirArgsForCall = append(fake.createDirArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateDirStub
	fakeReturns := fake.createDirReturns
	fake.recordInvocation("CreateDir", []interface{}{arg1})
	fake.createDirMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) CreateDirCallCount() int {
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	return len(fake.createDirArgsForCall)
}

func (fake *FakeGpFs) CreateDirCalls(stub func(string) error) {
	fake.createDirMutex.Lock()
	defer fake.createDirMutex.Unlock()
	fake.CreateDirStub = stub
}

func (fake *FakeGpFs) CreateDirArgsForCall(i int) string {
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	argsForCall := fake.createDirArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpFs) CreateDirReturns(result1 error) {
	fake.createDirMutex.Lock()
	defer fake.createDirMutex.Unlock()
	fake.CreateDirStub = nil
	fake.createDirReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) CreateDirReturnsOnCall(i int, result1 error) {
	fake.createDirMutex.Lock()
	defer fake.createDirMutex.Unlock()
	fake.CreateDirStub = nil
	if fake.createDirReturnsOnCall == nil {
		fake.createDirReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createDirReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) Delete(arg1 string) error {
	fake.deleteMutex.Lock()
	ret, specificReturn := fake.deleteReturnsOnCall[len(fake.deleteArgsForCall)]
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeleteStub
	fakeReturns := fake.deleteReturns
	fake.recordInvocation("Delete", []interface{}{arg1})
	fake.deleteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeGpFs) DeleteCalls(stub func(string) error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = stub
}

func (fake *FakeGpFs) DeleteArgsForCall(i int) string {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	argsForCall := fake.deleteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpFs) DeleteReturns(result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	fake.deleteReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) DeleteReturnsOnCall(i int, result1 error) {
	fake.deleteMutex.Lock()
	defer fake.deleteMutex.Unlock()
	fake.DeleteStub = nil
	if fake.deleteReturnsOnCall == nil {
		fake.deleteReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) GetFileMode(arg1 string) (fs.FileMode, error) {
	fake.getFileModeMutex.Lock()
	ret, specificReturn := fake.getFileModeReturnsOnCall[len(fake.getFileModeArgsForCall)]
	fake.getFileModeArgsForCall = append(fake.getFileModeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetFileModeStub
	fakeReturns := fake.getFileModeReturns
	fake.recordInvocation("GetFileMode", []interface{}{arg1})
	fake.getFileModeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) GetFileModeCallCount() int {
	fake.getFileModeMutex.RLock()
	defer fake.getFileModeMutex.RUnlock()
	return len(fake.getFileModeArgsForCall)
}

func (fake *FakeGpFs) GetFileModeCalls(stub func(string) (fs.FileMode, error)) {
	fake.getFileModeMutex.Lock()
	defer fake.getFileModeMutex.Unlock()
	fake.GetFileModeStub = stub
}

func (fake *FakeGpFs) GetFileModeArgsForCall(i int) string {
	fake.getFileModeMutex.RLock()
	defer fake.getFileModeMutex.RUnlock()
	argsForCall := fake.getFileModeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpFs) GetFileModeReturns(result1 fs.FileMode, result2 error) {
	fake.getFileModeMutex.Lock()
	defer fake.getFileModeMutex.Unlock()
	fake.GetFileModeStub = nil
	fake.getFileModeReturns = struct {
		result1 fs.FileMode
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) GetFileModeReturnsOnCall(i int, result1 fs.FileMode, result2 error) {
	fake.getFileModeMutex.Lock()
	defer fake.getFileModeMutex.Unlock()
	fake.GetFileModeStub = nil
	if fake.getFileModeReturnsOnCall == nil {
		fake.getFileModeReturnsOnCall = make(map[int]struct {
			result1 fs.FileMode
			result2 error
		})
	}
	fake.getFileModeReturnsOnCall[i] = struct {
		result1 fs.FileMode
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) GetUidAndGidForPath(arg1 string) (int, int, error) {
	fake.getUidAndGidForPathMutex.Lock()
	ret, specificReturn := fake.getUidAndGidForPathReturnsOnCall[len(fake.getUidAndGidForPathArgsForCall)]
	fake.getUidAndGidForPathArgsForCall = append(fake.getUidAndGidForPathArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetUidAndGidForPathStub
	fakeReturns := fake.getUidAndGidForPathReturns
	fake.recordInvocation("GetUidAndGidForPath", []interface{}{arg1})
	fake.getUidAndGidForPathMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeGpFs) GetUidAndGidForPathCallCount() int {
	fake.getUidAndGidForPathMutex.RLock()
	defer fake.getUidAndGidForPathMutex.RUnlock()
	return len(fake.getUidAndGidForPathArgsForCall)
}

func (fake *FakeGpFs) GetUidAndGidForPathCalls(stub func(string) (int, int, error)) {
	fake.getUidAndGidForPathMutex.Lock()
	defer fake.getUidAndGidForPathMutex.Unlock()
	fake.GetUidAndGidForPathStub = stub
}

func (fake *FakeGpFs) GetUidAndGidForPathArgsForCall(i int) string {
	fake.getUidAndGidForPathMutex.RLock()
	defer fake.getUidAndGidForPathMutex.RUnlock()
	argsForCall := fake.getUidAndGidForPathArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpFs) GetUidAndGidForPathReturns(result1 int, result2 int, result3 error) {
	fake.getUidAndGidForPathMutex.Lock()
	defer fake.getUidAndGidForPathMutex.Unlock()
	fake.GetUidAndGidForPathStub = nil
	fake.getUidAndGidForPathReturns = struct {
		result1 int
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGpFs) GetUidAndGidForPathReturnsOnCall(i int, result1 int, result2 int, result3 error) {
	fake.getUidAndGidForPathMutex.Lock()
	defer fake.getUidAndGidForPathMutex.Unlock()
	fake.GetUidAndGidForPathStub = nil
	if fake.getUidAndGidForPathReturnsOnCall == nil {
		fake.getUidAndGidForPathReturnsOnCall = make(map[int]struct {
			result1 int
			result2 int
			result3 error
		})
	}
	fake.getUidAndGidForPathReturnsOnCall[i] = struct {
		result1 int
		result2 int
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeGpFs) Glob(arg1 string) ([]string, error) {
	fake.globMutex.Lock()
	ret, specificReturn := fake.globReturnsOnCall[len(fake.globArgsForCall)]
	fake.globArgsForCall = append(fake.globArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GlobStub
	fakeReturns := fake.globReturns
	fake.recordInvocation("Glob", []interface{}{arg1})
	fake.globMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) GlobCallCount() int {
	fake.globMutex.RLock()
	defer fake.globMutex.RUnlock()
	return len(fake.globArgsForCall)
}

func (fake *FakeGpFs) GlobCalls(stub func(string) ([]string, error)) {
	fake.globMutex.Lock()
	defer fake.globMutex.Unlock()
	fake.GlobStub = stub
}

func (fake *FakeGpFs) GlobArgsForCall(i int) string {
	fake.globMutex.RLock()
	defer fake.globMutex.RUnlock()
	argsForCall := fake.globArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpFs) GlobReturns(result1 []string, result2 error) {
	fake.globMutex.Lock()
	defer fake.globMutex.Unlock()
	fake.GlobStub = nil
	fake.globReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) GlobReturnsOnCall(i int, result1 []string, result2 error) {
	fake.globMutex.Lock()
	defer fake.globMutex.Unlock()
	fake.GlobStub = nil
	if fake.globReturnsOnCall == nil {
		fake.globReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.globReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) MatchPattern(arg1 string, arg2 string) ([]string, error) {
	fake.matchPatternMutex.Lock()
	ret, specificReturn := fake.matchPatternReturnsOnCall[len(fake.matchPatternArgsForCall)]
	fake.matchPatternArgsForCall = append(fake.matchPatternArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MatchPatternStub
	fakeReturns := fake.matchPatternReturns
	fake.recordInvocation("MatchPattern", []interface{}{arg1, arg2})
	fake.matchPatternMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) MatchPatternCallCount() int {
	fake.matchPatternMutex.RLock()
	defer fake.matchPatternMutex.RUnlock()
	return len(fake.matchPatternArgsForCall)
}

func (fake *FakeGpFs) MatchPatternCalls(stub func(string, string) ([]string, error)) {
	fake.matchPatternMutex.Lock()
	defer fake.matchPatternMutex.Unlock()
	fake.MatchPatternStub = stub
}

func (fake *FakeGpFs) MatchPatternArgsForCall(i int) (string, string) {
	fake.matchPatternMutex.RLock()
	defer fake.matchPatternMutex.RUnlock()
	argsForCall := fake.matchPatternArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGpFs) MatchPatternReturns(result1 []string, result2 error) {
	fake.matchPatternMutex.Lock()
	defer fake.matchPatternMutex.Unlock()
	fake.MatchPatternStub = nil
	fake.matchPatternReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) MatchPatternReturnsOnCall(i int, result1 []string, result2 error) {
	fake.matchPatternMutex.Lock()
	defer fake.matchPatternMutex.Unlock()
	fake.MatchPatternStub = nil
	if fake.matchPatternReturnsOnCall == nil {
		fake.matchPatternReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.matchPatternReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) MatchString(arg1 string, arg2 string) ([]string, error) {
	fake.matchStringMutex.Lock()
	ret, specificReturn := fake.matchStringReturnsOnCall[len(fake.matchStringArgsForCall)]
	fake.matchStringArgsForCall = append(fake.matchStringArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.MatchStringStub
	fakeReturns := fake.matchStringReturns
	fake.recordInvocation("MatchString", []interface{}{arg1, arg2})
	fake.matchStringMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) MatchStringCallCount() int {
	fake.matchStringMutex.RLock()
	defer fake.matchStringMutex.RUnlock()
	return len(fake.matchStringArgsForCall)
}

func (fake *FakeGpFs) MatchStringCalls(stub func(string, string) ([]string, error)) {
	fake.matchStringMutex.Lock()
	defer fake.matchStringMutex.Unlock()
	fake.MatchStringStub = stub
}

func (fake *FakeGpFs) MatchStringArgsForCall(i int) (string, string) {
	fake.matchStringMutex.RLock()
	defer fake.matchStringMutex.RUnlock()
	argsForCall := fake.matchStringArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGpFs) MatchStringReturns(result1 []string, result2 error) {
	fake.matchStringMutex.Lock()
	defer fake.matchStringMutex.Unlock()
	fake.MatchStringStub = nil
	fake.matchStringReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) MatchStringReturnsOnCall(i int, result1 []string, result2 error) {
	fake.matchStringMutex.Lock()
	defer fake.matchStringMutex.Unlock()
	fake.MatchStringStub = nil
	if fake.matchStringReturnsOnCall == nil {
		fake.matchStringReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.matchStringReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) Read(arg1 string) (string, error) {
	fake.readMutex.Lock()
	ret, specificReturn := fake.readReturnsOnCall[len(fake.readArgsForCall)]
	fake.readArgsForCall = append(fake.readArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ReadStub
	fakeReturns := fake.readReturns
	fake.recordInvocation("Read", []interface{}{arg1})
	fake.readMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpFs) ReadCallCount() int {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	return len(fake.readArgsForCall)
}

func (fake *FakeGpFs) ReadCalls(stub func(string) (string, error)) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = stub
}

func (fake *FakeGpFs) ReadArgsForCall(i int) string {
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	argsForCall := fake.readArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpFs) ReadReturns(result1 string, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	fake.readReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) ReadReturnsOnCall(i int, result1 string, result2 error) {
	fake.readMutex.Lock()
	defer fake.readMutex.Unlock()
	fake.ReadStub = nil
	if fake.readReturnsOnCall == nil {
		fake.readReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.readReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeGpFs) RecursiveChown(arg1 string, arg2 string, arg3 string) error {
	fake.recursiveChownMutex.Lock()
	ret, specificReturn := fake.recursiveChownReturnsOnCall[len(fake.recursiveChownArgsForCall)]
	fake.recursiveChownArgsForCall = append(fake.recursiveChownArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.RecursiveChownStub
	fakeReturns := fake.recursiveChownReturns
	fake.recordInvocation("RecursiveChown", []interface{}{arg1, arg2, arg3})
	fake.recursiveChownMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) RecursiveChownCallCount() int {
	fake.recursiveChownMutex.RLock()
	defer fake.recursiveChownMutex.RUnlock()
	return len(fake.recursiveChownArgsForCall)
}

func (fake *FakeGpFs) RecursiveChownCalls(stub func(string, string, string) error) {
	fake.recursiveChownMutex.Lock()
	defer fake.recursiveChownMutex.Unlock()
	fake.RecursiveChownStub = stub
}

func (fake *FakeGpFs) RecursiveChownArgsForCall(i int) (string, string, string) {
	fake.recursiveChownMutex.RLock()
	defer fake.recursiveChownMutex.RUnlock()
	argsForCall := fake.recursiveChownArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGpFs) RecursiveChownReturns(result1 error) {
	fake.recursiveChownMutex.Lock()
	defer fake.recursiveChownMutex.Unlock()
	fake.RecursiveChownStub = nil
	fake.recursiveChownReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) RecursiveChownReturnsOnCall(i int, result1 error) {
	fake.recursiveChownMutex.Lock()
	defer fake.recursiveChownMutex.Unlock()
	fake.RecursiveChownStub = nil
	if fake.recursiveChownReturnsOnCall == nil {
		fake.recursiveChownReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.recursiveChownReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) Write(arg1 string, arg2 string, arg3 fs.FileMode) error {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 fs.FileMode
	}{arg1, arg2, arg3})
	stub := fake.WriteStub
	fakeReturns := fake.writeReturns
	fake.recordInvocation("Write", []interface{}{arg1, arg2, arg3})
	fake.writeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpFs) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeGpFs) WriteCalls(stub func(string, string, fs.FileMode) error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeGpFs) WriteArgsForCall(i int) (string, string, fs.FileMode) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeGpFs) WriteReturns(result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) WriteReturnsOnCall(i int, result1 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGpFs) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.appendMutex.RLock()
	defer fake.appendMutex.RUnlock()
	fake.checkExistsMutex.RLock()
	defer fake.checkExistsMutex.RUnlock()
	fake.chmodMutex.RLock()
	defer fake.chmodMutex.RUnlock()
	fake.chownMutex.RLock()
	defer fake.chownMutex.RUnlock()
	fake.copyMutex.RLock()
	defer fake.copyMutex.RUnlock()
	fake.createDirMutex.RLock()
	defer fake.createDirMutex.RUnlock()
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	fake.getFileModeMutex.RLock()
	defer fake.getFileModeMutex.RUnlock()
	fake.getUidAndGidForPathMutex.RLock()
	defer fake.getUidAndGidForPathMutex.RUnlock()
	fake.globMutex.RLock()
	defer fake.globMutex.RUnlock()
	fake.matchPatternMutex.RLock()
	defer fake.matchPatternMutex.RUnlock()
	fake.matchStringMutex.RLock()
	defer fake.matchStringMutex.RUnlock()
	fake.readMutex.RLock()
	defer fake.readMutex.RUnlock()
	fake.recursiveChownMutex.RLock()
	defer fake.recursiveChownMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGpFs) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gpfs.GpFs = new(FakeGpFs)
