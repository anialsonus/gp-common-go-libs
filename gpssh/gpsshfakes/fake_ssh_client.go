// Code generated by counterfeiter. DO NOT EDIT.
package gpsshfakes

import (
	"sync"

	"github.com/greenplum-db/gp-common-go-libs/gpssh"
	"golang.org/x/crypto/ssh"
)

type FakeSshClient struct {
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct {
	}
	closeReturns struct {
		result1 error
	}
	closeReturnsOnCall map[int]struct {
		result1 error
	}
	NewSessionStub        func() (*ssh.Session, error)
	newSessionMutex       sync.RWMutex
	newSessionArgsForCall []struct {
	}
	newSessionReturns struct {
		result1 *ssh.Session
		result2 error
	}
	newSessionReturnsOnCall map[int]struct {
		result1 *ssh.Session
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSshClient) Close() error {
	fake.closeMutex.Lock()
	ret, specificReturn := fake.closeReturnsOnCall[len(fake.closeArgsForCall)]
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct {
	}{})
	stub := fake.CloseStub
	fakeReturns := fake.closeReturns
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSshClient) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeSshClient) CloseCalls(stub func() error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = stub
}

func (fake *FakeSshClient) CloseReturns(result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSshClient) CloseReturnsOnCall(i int, result1 error) {
	fake.closeMutex.Lock()
	defer fake.closeMutex.Unlock()
	fake.CloseStub = nil
	if fake.closeReturnsOnCall == nil {
		fake.closeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.closeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSshClient) NewSession() (*ssh.Session, error) {
	fake.newSessionMutex.Lock()
	ret, specificReturn := fake.newSessionReturnsOnCall[len(fake.newSessionArgsForCall)]
	fake.newSessionArgsForCall = append(fake.newSessionArgsForCall, struct {
	}{})
	stub := fake.NewSessionStub
	fakeReturns := fake.newSessionReturns
	fake.recordInvocation("NewSession", []interface{}{})
	fake.newSessionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSshClient) NewSessionCallCount() int {
	fake.newSessionMutex.RLock()
	defer fake.newSessionMutex.RUnlock()
	return len(fake.newSessionArgsForCall)
}

func (fake *FakeSshClient) NewSessionCalls(stub func() (*ssh.Session, error)) {
	fake.newSessionMutex.Lock()
	defer fake.newSessionMutex.Unlock()
	fake.NewSessionStub = stub
}

func (fake *FakeSshClient) NewSessionReturns(result1 *ssh.Session, result2 error) {
	fake.newSessionMutex.Lock()
	defer fake.newSessionMutex.Unlock()
	fake.NewSessionStub = nil
	fake.newSessionReturns = struct {
		result1 *ssh.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeSshClient) NewSessionReturnsOnCall(i int, result1 *ssh.Session, result2 error) {
	fake.newSessionMutex.Lock()
	defer fake.newSessionMutex.Unlock()
	fake.NewSessionStub = nil
	if fake.newSessionReturnsOnCall == nil {
		fake.newSessionReturnsOnCall = make(map[int]struct {
			result1 *ssh.Session
			result2 error
		})
	}
	fake.newSessionReturnsOnCall[i] = struct {
		result1 *ssh.Session
		result2 error
	}{result1, result2}
}

func (fake *FakeSshClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	fake.newSessionMutex.RLock()
	defer fake.newSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSshClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gpssh.SshClient = new(FakeSshClient)
