// Code generated by counterfeiter. DO NOT EDIT.
package gpsshfakes

import (
	"sync"

	"github.com/greenplum-db/gp-common-go-libs/gpssh"
)

type FakeGpSshClient struct {
	RunSshCommandStub        func(string) ([]byte, error)
	runSshCommandMutex       sync.RWMutex
	runSshCommandArgsForCall []struct {
		arg1 string
	}
	runSshCommandReturns struct {
		result1 []byte
		result2 error
	}
	runSshCommandReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGpSshClient) RunSshCommand(arg1 string) ([]byte, error) {
	fake.runSshCommandMutex.Lock()
	ret, specificReturn := fake.runSshCommandReturnsOnCall[len(fake.runSshCommandArgsForCall)]
	fake.runSshCommandArgsForCall = append(fake.runSshCommandArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RunSshCommandStub
	fakeReturns := fake.runSshCommandReturns
	fake.recordInvocation("RunSshCommand", []interface{}{arg1})
	fake.runSshCommandMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpSshClient) RunSshCommandCallCount() int {
	fake.runSshCommandMutex.RLock()
	defer fake.runSshCommandMutex.RUnlock()
	return len(fake.runSshCommandArgsForCall)
}

func (fake *FakeGpSshClient) RunSshCommandCalls(stub func(string) ([]byte, error)) {
	fake.runSshCommandMutex.Lock()
	defer fake.runSshCommandMutex.Unlock()
	fake.RunSshCommandStub = stub
}

func (fake *FakeGpSshClient) RunSshCommandArgsForCall(i int) string {
	fake.runSshCommandMutex.RLock()
	defer fake.runSshCommandMutex.RUnlock()
	argsForCall := fake.runSshCommandArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGpSshClient) RunSshCommandReturns(result1 []byte, result2 error) {
	fake.runSshCommandMutex.Lock()
	defer fake.runSshCommandMutex.Unlock()
	fake.RunSshCommandStub = nil
	fake.runSshCommandReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeGpSshClient) RunSshCommandReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.runSshCommandMutex.Lock()
	defer fake.runSshCommandMutex.Unlock()
	fake.RunSshCommandStub = nil
	if fake.runSshCommandReturnsOnCall == nil {
		fake.runSshCommandReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.runSshCommandReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeGpSshClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.runSshCommandMutex.RLock()
	defer fake.runSshCommandMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGpSshClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gpssh.GpSshClient = new(FakeGpSshClient)
