// Code generated by counterfeiter. DO NOT EDIT.
package gpsshfakes

import (
	"io"
	"sync"

	"github.com/greenplum-db/gp-common-go-libs/gpssh"
	"golang.org/x/crypto/ssh"
)

type FakeGpSshSigner struct {
	PublicKeyStub        func() ssh.PublicKey
	publicKeyMutex       sync.RWMutex
	publicKeyArgsForCall []struct {
	}
	publicKeyReturns struct {
		result1 ssh.PublicKey
	}
	publicKeyReturnsOnCall map[int]struct {
		result1 ssh.PublicKey
	}
	SignStub        func(io.Reader, []byte) (*ssh.Signature, error)
	signMutex       sync.RWMutex
	signArgsForCall []struct {
		arg1 io.Reader
		arg2 []byte
	}
	signReturns struct {
		result1 *ssh.Signature
		result2 error
	}
	signReturnsOnCall map[int]struct {
		result1 *ssh.Signature
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGpSshSigner) PublicKey() ssh.PublicKey {
	fake.publicKeyMutex.Lock()
	ret, specificReturn := fake.publicKeyReturnsOnCall[len(fake.publicKeyArgsForCall)]
	fake.publicKeyArgsForCall = append(fake.publicKeyArgsForCall, struct {
	}{})
	stub := fake.PublicKeyStub
	fakeReturns := fake.publicKeyReturns
	fake.recordInvocation("PublicKey", []interface{}{})
	fake.publicKeyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGpSshSigner) PublicKeyCallCount() int {
	fake.publicKeyMutex.RLock()
	defer fake.publicKeyMutex.RUnlock()
	return len(fake.publicKeyArgsForCall)
}

func (fake *FakeGpSshSigner) PublicKeyCalls(stub func() ssh.PublicKey) {
	fake.publicKeyMutex.Lock()
	defer fake.publicKeyMutex.Unlock()
	fake.PublicKeyStub = stub
}

func (fake *FakeGpSshSigner) PublicKeyReturns(result1 ssh.PublicKey) {
	fake.publicKeyMutex.Lock()
	defer fake.publicKeyMutex.Unlock()
	fake.PublicKeyStub = nil
	fake.publicKeyReturns = struct {
		result1 ssh.PublicKey
	}{result1}
}

func (fake *FakeGpSshSigner) PublicKeyReturnsOnCall(i int, result1 ssh.PublicKey) {
	fake.publicKeyMutex.Lock()
	defer fake.publicKeyMutex.Unlock()
	fake.PublicKeyStub = nil
	if fake.publicKeyReturnsOnCall == nil {
		fake.publicKeyReturnsOnCall = make(map[int]struct {
			result1 ssh.PublicKey
		})
	}
	fake.publicKeyReturnsOnCall[i] = struct {
		result1 ssh.PublicKey
	}{result1}
}

func (fake *FakeGpSshSigner) Sign(arg1 io.Reader, arg2 []byte) (*ssh.Signature, error) {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.signMutex.Lock()
	ret, specificReturn := fake.signReturnsOnCall[len(fake.signArgsForCall)]
	fake.signArgsForCall = append(fake.signArgsForCall, struct {
		arg1 io.Reader
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.SignStub
	fakeReturns := fake.signReturns
	fake.recordInvocation("Sign", []interface{}{arg1, arg2Copy})
	fake.signMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeGpSshSigner) SignCallCount() int {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	return len(fake.signArgsForCall)
}

func (fake *FakeGpSshSigner) SignCalls(stub func(io.Reader, []byte) (*ssh.Signature, error)) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = stub
}

func (fake *FakeGpSshSigner) SignArgsForCall(i int) (io.Reader, []byte) {
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	argsForCall := fake.signArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeGpSshSigner) SignReturns(result1 *ssh.Signature, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	fake.signReturns = struct {
		result1 *ssh.Signature
		result2 error
	}{result1, result2}
}

func (fake *FakeGpSshSigner) SignReturnsOnCall(i int, result1 *ssh.Signature, result2 error) {
	fake.signMutex.Lock()
	defer fake.signMutex.Unlock()
	fake.SignStub = nil
	if fake.signReturnsOnCall == nil {
		fake.signReturnsOnCall = make(map[int]struct {
			result1 *ssh.Signature
			result2 error
		})
	}
	fake.signReturnsOnCall[i] = struct {
		result1 *ssh.Signature
		result2 error
	}{result1, result2}
}

func (fake *FakeGpSshSigner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.publicKeyMutex.RLock()
	defer fake.publicKeyMutex.RUnlock()
	fake.signMutex.RLock()
	defer fake.signMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGpSshSigner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ gpssh.GpSshSigner = new(FakeGpSshSigner)
